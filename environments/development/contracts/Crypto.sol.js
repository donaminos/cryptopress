// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"salary","type":"uint256"}],"name":"askForSalary","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"rejectInterruption","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"acceptInterruption","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"journalistAdress","type":"address"},{"name":"fullname","type":"string"}],"name":"registerJournalist","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"content","type":"string"}],"name":"sendProposalToRevoke","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"stopVotingPeriod","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"getCaller","outputs":[{"name":"caller","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"giveFundsBackToParticipants","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"value","type":"uint256"}],"name":"sendFundsToParticipate","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"proposalId","type":"uint256"}],"name":"voteForRevocation","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"sendFundsToParticipate","outputs":[],"type":"function"}],
    binary: "6060604052612760600155610736806100186000396000f36060604052361561008d5760e060020a600035046319d86cdd811461009e578063554cf56c146100a05780635e2f357e146100a05780636417a105146100a857806393c6ed9214610127578063a56629b4146100a0578063ab470f051461018f578063ad4b6ce0146100a0578063ddacc15c146101ab578063df899860146101be578063dfa1b091146101e7575b61009e5b600034116101ef57610002565b005b61009e61020b565b60408051602060248035600481810135601f810185900485028601850190965285855261009e95813595919460449492939092019181908401838280828437509496505050505050506003805460018101808355828183801582901161020d5760020281600202836000526020600020918201910161020d91906102a8565b6040805160206004803580820135601f810184900484028501840190955284845261009e949193602493909291840191908190840183828082843750949650505050505050600160a060020a0333166000908152602081905260408120541161035757610002565b6040805133600160a060020a0316815290519081900360200190f35b61009e600435600081116105eb57610002565b61009e600435600160a060020a0333166000908152602081905260408120541161060657610002565b61009e610091565b600160a060020a03331660009081526020819052604090203490555b565b505050919090600052602060002090600202016000506040805180820190915284815260208181018590528254600160a060020a0319168617835584516001848101805460008281528590209596959194600293821615610100026000190190911692909204601f9081018390048201939289019083901061031e57805160ff19168380011785555b5061034e929150610306565b50506002015b8082111561031a578054600160a060020a031916815560018181018054600080835592600290821615610100026000190190911604601f8190106102ec57506102a2565b601f0160209004906000526020600020908101906102a291905b8082111561031a5760008155600101610306565b5090565b82800160010185558215610296579182015b82811115610296578251826000505591602001919060010190610330565b50505050505050565b6002805460018101808355828183801582901161038d5760060281600602836000526020600020918201910161038d9190610485565b50505091909060005260206000209060060201600060c06040519081016040528033815260200185815260200160016040518059106103c95750595b81815260209182028101820160409081529083526000838301819052429184019190915260609290920182905282518554600160a060020a03191617855582810151805160018781018054818752958590209698975095601f600292871615610100026000190190961691909104850184900481019491939092019083901061050357805160ff19168380011785555b50610533929150610306565b5050600060038201819055600482015560058101805460ff191690556006015b8082111561031a578054600160a060020a031916815560018181018054600080835592600290821615610100026000190190911604601f8190106104e557505b506002820180546000808355918252602090912061046591810190610306565b601f0160209004906000526020600020908101906104c59190610306565b82800160010185558215610459579182015b82811115610459578251826000505591602001919060010190610515565b50506040820151816002016000509080519060200190828054828255906000526020600020908101928215610595579160200282015b828111156105955782518254600160a060020a0319161782556020929092019160019190910190610569565b506105bb9291505b8082111561031a578054600160a060020a031916815560010161059d565b5050606082015160038201556080820151600482015560a0909101516005909101805460ff191690911790555050565b33600160a060020a0316600090815260208190526040902055565b600280548290811015610002576000919091526006027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad00180546001810180835590919082801582901161066b5760008381526020902061066b918101908301610306565b505050506002600050818154811015610002576000919091526006027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad00180546001810180835582818380158290116106d5576000838152602090206106d5918101908301610306565b5050506000928352506020909120018054600160a060020a03191633179055600280548290811015610002576000919091526006027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad101805460010190555056",
    unlinked_binary: "6060604052612760600155610736806100186000396000f36060604052361561008d5760e060020a600035046319d86cdd811461009e578063554cf56c146100a05780635e2f357e146100a05780636417a105146100a857806393c6ed9214610127578063a56629b4146100a0578063ab470f051461018f578063ad4b6ce0146100a0578063ddacc15c146101ab578063df899860146101be578063dfa1b091146101e7575b61009e5b600034116101ef57610002565b005b61009e61020b565b60408051602060248035600481810135601f810185900485028601850190965285855261009e95813595919460449492939092019181908401838280828437509496505050505050506003805460018101808355828183801582901161020d5760020281600202836000526020600020918201910161020d91906102a8565b6040805160206004803580820135601f810184900484028501840190955284845261009e949193602493909291840191908190840183828082843750949650505050505050600160a060020a0333166000908152602081905260408120541161035757610002565b6040805133600160a060020a0316815290519081900360200190f35b61009e600435600081116105eb57610002565b61009e600435600160a060020a0333166000908152602081905260408120541161060657610002565b61009e610091565b600160a060020a03331660009081526020819052604090203490555b565b505050919090600052602060002090600202016000506040805180820190915284815260208181018590528254600160a060020a0319168617835584516001848101805460008281528590209596959194600293821615610100026000190190911692909204601f9081018390048201939289019083901061031e57805160ff19168380011785555b5061034e929150610306565b50506002015b8082111561031a578054600160a060020a031916815560018181018054600080835592600290821615610100026000190190911604601f8190106102ec57506102a2565b601f0160209004906000526020600020908101906102a291905b8082111561031a5760008155600101610306565b5090565b82800160010185558215610296579182015b82811115610296578251826000505591602001919060010190610330565b50505050505050565b6002805460018101808355828183801582901161038d5760060281600602836000526020600020918201910161038d9190610485565b50505091909060005260206000209060060201600060c06040519081016040528033815260200185815260200160016040518059106103c95750595b81815260209182028101820160409081529083526000838301819052429184019190915260609290920182905282518554600160a060020a03191617855582810151805160018781018054818752958590209698975095601f600292871615610100026000190190961691909104850184900481019491939092019083901061050357805160ff19168380011785555b50610533929150610306565b5050600060038201819055600482015560058101805460ff191690556006015b8082111561031a578054600160a060020a031916815560018181018054600080835592600290821615610100026000190190911604601f8190106104e557505b506002820180546000808355918252602090912061046591810190610306565b601f0160209004906000526020600020908101906104c59190610306565b82800160010185558215610459579182015b82811115610459578251826000505591602001919060010190610515565b50506040820151816002016000509080519060200190828054828255906000526020600020908101928215610595579160200282015b828111156105955782518254600160a060020a0319161782556020929092019160019190910190610569565b506105bb9291505b8082111561031a578054600160a060020a031916815560010161059d565b5050606082015160038201556080820151600482015560a0909101516005909101805460ff191690911790555050565b33600160a060020a0316600090815260208190526040902055565b600280548290811015610002576000919091526006027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad00180546001810180835590919082801582901161066b5760008381526020902061066b918101908301610306565b505050506002600050818154811015610002576000919091526006027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad00180546001810180835582818380158290116106d5576000838152602090206106d5918101908301610306565b5050506000928352506020909120018054600160a060020a03191633179055600280548290811015610002576000919091526006027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad101805460010190555056",
    address: "0xc4d3dfb0fe7c92ff591714147d179bed76450fe1",
    generated_with: "2.0.9",
    contract_name: "Crypto"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Crypto error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Crypto error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Crypto error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Crypto error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Crypto = Contract;
  }

})();
